{"version":3,"file":"0.js","sources":["webpack:///./components/dashboard/filePond.js"],"sourcesContent":["// Import React FilePond\r\nimport FilePondPluginFileRename from \"filepond-plugin-file-rename\";\r\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\r\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\r\nimport FilePondPluginImageCrop from \"filepond-plugin-image-crop\";\r\n// Import the Image EXIF Orientation and Image Preview plugins\r\n// Note: These need to be installed separately\r\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\r\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\r\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\r\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\r\nimport FilePondPluginImageTransform from \"filepond-plugin-image-transform\";\r\nimport FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\";\r\n// Import FilePond styles\r\nimport \"filepond/dist/filepond.min.css\";\r\nimport React from \"react\";\r\nimport { FilePond, registerPlugin } from \"react-filepond\";\r\nimport { URL } from \"../../config\";\r\nimport * as Queries from \"../../utils/queries\";\r\n\r\n// Register the plugins\r\nregisterPlugin(\r\n  FilePondPluginImageExifOrientation,\r\n  FilePondPluginImagePreview,\r\n  FilePondPluginImageResize,\r\n  FilePondPluginFileRename,\r\n  FilePondPluginFileValidateSize,\r\n  FilePondPluginFileValidateType,\r\n  FilePondPluginImageCrop,\r\n  FilePondPluginImageValidateSize,\r\n  FilePondPluginImageTransform\r\n);\r\n\r\n// Our app\r\nclass FileUploader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // Set initial files, type 'local' means this is a file\r\n      // that has already been uploaded to the server (see docs)\r\n      //  files: [\r\n      //     {\r\n      //       source: `${URL}/public/uploadedfiles/${this.props.files.name}`,\r\n      //       options: {\r\n      //         type: \"local\"\r\n      //       }\r\n      //     }\r\n      //  ]\r\n      files: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.files) {\r\n      var files = [];\r\n      this.props.files.map(file => {\r\n        files.push({\r\n          source: `${URL}/uploadedimages/${file.name}`,\r\n          options: {\r\n            type: \"local\"\r\n          }\r\n        });\r\n      });\r\n\r\n      this.setState({ files: files });\r\n    }\r\n  };\r\n\r\n  handleInit() {\r\n    console.log(\"FilePond instance has initialised\", this.pond);\r\n  }\r\n\r\n  makeid = length => {\r\n    var result = \"\";\r\n    var characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  };\r\n\r\n  render() {\r\n    var n;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <FilePond\r\n          ref={this.props.setRef}\r\n          files={this.state.files}\r\n          allowMultiple={true}\r\n          name={\"file\"}\r\n          maxFiles={10}\r\n          server={{\r\n            process: \"/api/dashboard/file/postupload\",\r\n\r\n            load: (source, load) => {\r\n              fetch(source)\r\n                .then(res => res.blob())\r\n                .then(load);\r\n            },\r\n            remove: (source, load, error) => {\r\n              var name = source.replace(`${URL}/uploadedimages/`, \"\");\r\n\r\n              Queries.deleteFile(name);\r\n\r\n              error(\"oh my goodness\");\r\n\r\n              load();\r\n            }\r\n          }}\r\n          imageResizeMode=\"cover\"\r\n          allowImageTransform={true}\r\n          allowImageCrop={true}\r\n          imageCropAspectRatio={\"1:1\"}\r\n          oninit={() => this.handleInit()}\r\n          imageTransformOutputQuality={65}\r\n          imageTransformOutputMimeType=\"image/jpeg\"\r\n          fileRenameFunction={file => {\r\n            n = this.makeid(25);\r\n            return n + file.extension;\r\n          }}\r\n          onupdatefiles={fileItems => {\r\n            this.setState({ files: fileItems.map(fileItem => fileItem.file) });\r\n          }}\r\n          // onupdatefiles={this.props.onupdatefiles }\r\n          onDrop={this.props.handleUploadImages}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileUploader;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AAFA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAjCA;AAuCA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAiBA;AACA;AACA;AACA;AAYA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AArCA;AAuCA;AAvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CA;AACA;AAnGA;AACA;AAoGA;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}