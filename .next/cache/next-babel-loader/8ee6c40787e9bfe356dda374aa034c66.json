{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\src\\\\hottofindtest\\\\components\\\\dashboard\\\\profileFilePond.js\";\nvar __jsx = React.createElement;\n// Import React FilePond\nimport React, { useState, useEffect } from \"react\";\nimport { FilePond, registerPlugin } from \"react-filepond\"; // Import FilePond styles\n\nimport \"filepond/dist/filepond.min.css\";\nimport FilePondPluginFileRename from \"filepond-plugin-file-rename\";\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\nimport FilePondPluginImageCrop from \"filepond-plugin-image-crop\"; // Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\nimport FilePondPluginImageTransform from \"filepond-plugin-image-transform\";\nimport FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\";\nimport * as Queries from '../../utils/queries';\nimport { URL } from \"../../config\"; // Register the plugins\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageResize, FilePondPluginFileRename, FilePondPluginFileValidateSize, FilePondPluginFileValidateType, FilePondPluginImageCrop, FilePondPluginImageValidateSize, FilePondPluginImageTransform); // Our app\n\nvar FileUploader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FileUploader, _React$Component);\n\n  function FileUploader(props) {\n    var _this;\n\n    _classCallCheck(this, FileUploader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileUploader).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      if (_this.props.user.avatar) {\n        var files = [];\n        files.push({\n          source: \"\".concat(URL, \"/uploadedimages/profile/\").concat(_this.props.user.avatar),\n          options: {\n            type: \"local\"\n          }\n        });\n        console.log(files);\n\n        _this.setState({\n          files: files\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeid\", function (length) {\n      var result = \"\";\n      var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    });\n\n    _this.state = {\n      // Set initial files, type 'local' means this is a file\n      // that has already been uploaded to the server (see docs)\n      //  files: [\n      //     {\n      //       source: `${URL}/public/uploadedfiles/${this.props.files.name}`,\n      //       options: {\n      //         type: \"local\"\n      //       }\n      //     }\n      //  ]\n      files: []\n    };\n    return _this;\n  }\n\n  _createClass(FileUploader, [{\n    key: \"handleInit\",\n    value: function handleInit() {\n      console.log(\"FilePond instance has initialised\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var n;\n      return __jsx(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, __jsx(FilePond, {\n        ref: this.props.setRef,\n        files: this.state.files,\n        allowMultiple: false,\n        name: \"file\",\n        maxFiles: 1,\n        server: {\n          // process: \"/api/dashboard/file/profileupload\",\n          process: {\n            url: '/api/dashboard/file/profileupload',\n            method: 'POST',\n            onload: function onload(response) {\n              console.log(response);\n              var file = {\n                name: response,\n                username: _this2.props.user.username\n              };\n              Queries.uploadProfilePhoto(file);\n            },\n            onerror: function onerror(response) {\n              return response.data;\n            },\n            ondata: function ondata(formData) {\n              formData.append('username', _this2.props.user.username);\n              return formData;\n            }\n          },\n          load: function load(source, _load) {\n            // simulates loading a file from the server\n            fetch(source).then(function (res) {\n              return res.blob();\n            }).then(_load);\n          },\n          remove: function remove(source, load, error) {\n            // var name = source.replace(`/uploadedimages/profile/`, '')      \n            var file = {\n              username: _this2.props.user.username\n            }; // Should somehow send `source` to server so server can remove the file with this source\n\n            Queries.deleteAvatar(file); // Can call the error method if something is wrong, should exit after\n\n            error('oh my goodness'); // Should call the load method when done, no parameters required\n\n            load();\n          }\n        },\n        imageResizeMode: \"cover\",\n        allowImageTransform: true,\n        allowImageCrop: true,\n        imageCropAspectRatio: \"1:1\",\n        oninit: function oninit() {\n          return _this2.handleInit();\n        },\n        imageTransformOutputQuality: 65,\n        imageTransformOutputMimeType: \"image/jpeg\",\n        fileRenameFunction: function fileRenameFunction(file) {\n          n = _this2.makeid(25);\n          return n + file.extension;\n        },\n        onupdatefiles: function onupdatefiles(fileItems) {\n          //this.props.onupdatefiles({ files: fileItems.map(fileItem => fileItem.file) });\n          _this2.setState({\n            files: fileItems.map(function (fileItem) {\n              return fileItem.file;\n            })\n          });\n        } // onupdatefiles={this.props.onupdatefiles }\n        ,\n        onDrop: this.props.handleUploadImages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FileUploader;\n}(React.Component);\n\nexport default FileUploader;","map":{"version":3,"sources":["C:/src/hottofindtest/components/dashboard/profileFilePond.js"],"names":["React","useState","useEffect","FilePond","registerPlugin","FilePondPluginFileRename","FilePondPluginFileValidateSize","FilePondPluginFileValidateType","FilePondPluginImageCrop","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageResize","FilePondPluginImageTransform","FilePondPluginImageValidateSize","Queries","URL","FileUploader","props","user","avatar","files","push","source","options","type","console","log","setState","length","result","characters","charactersLength","i","charAt","Math","floor","random","state","n","setRef","process","url","method","onload","response","file","name","username","uploadProfilePhoto","onerror","data","ondata","formData","append","load","fetch","then","res","blob","remove","error","deleteAvatar","handleInit","makeid","extension","fileItems","map","fileItem","handleUploadImages","Component"],"mappings":"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","sourcesContent":["// Import React FilePond\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { FilePond, registerPlugin } from \"react-filepond\";\r\n\r\n// Import FilePond styles\r\nimport \"filepond/dist/filepond.min.css\";\r\n\r\nimport FilePondPluginFileRename from \"filepond-plugin-file-rename\";\r\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\r\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\r\nimport FilePondPluginImageCrop from \"filepond-plugin-image-crop\";\r\n// Import the Image EXIF Orientation and Image Preview plugins\r\n// Note: These need to be installed separately\r\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\r\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\r\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\r\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\r\nimport FilePondPluginImageTransform from \"filepond-plugin-image-transform\";\r\nimport FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\";\r\n\r\nimport * as Queries from '../../utils/queries'\r\n\r\n\r\nimport { URL } from \"../../config\";\r\n\r\n// Register the plugins\r\nregisterPlugin(\r\n  FilePondPluginImageExifOrientation,\r\n  FilePondPluginImagePreview,\r\n  FilePondPluginImageResize,\r\n  FilePondPluginFileRename,\r\n  FilePondPluginFileValidateSize,\r\n  FilePondPluginFileValidateType,\r\n  FilePondPluginImageCrop,\r\n  FilePondPluginImageValidateSize,\r\n  FilePondPluginImageTransform\r\n);\r\n\r\n// Our app\r\nclass FileUploader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // Set initial files, type 'local' means this is a file\r\n      // that has already been uploaded to the server (see docs)\r\n      //  files: [\r\n      //     {\r\n      //       source: `${URL}/public/uploadedfiles/${this.props.files.name}`,\r\n      //       options: {\r\n      //         type: \"local\"\r\n      //       }\r\n      //     }\r\n      //  ]\r\n      files: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.user.avatar) {\r\n      var files = []\r\n      \r\n      files.push({\r\n        source: `${URL}/uploadedimages/profile/${this.props.user.avatar}`,\r\n          options: {\r\n            type: \"local\"\r\n          }\r\n      });\r\n\r\n      console.log(files)\r\n      this.setState({ files: files });\r\n    }\r\n  };\r\n\r\n  handleInit() {\r\n    console.log(\"FilePond instance has initialised\");\r\n  }\r\n\r\n  makeid = length => {\r\n    var result = \"\";\r\n    var characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  };\r\n\r\n  render() {\r\n    var n;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <FilePond\r\n          ref={this.props.setRef}\r\n          files={this.state.files}\r\n          allowMultiple={false}\r\n          name={\"file\"}\r\n          maxFiles={1}\r\n          server={{\r\n           // process: \"/api/dashboard/file/profileupload\",\r\n           process: {\r\n            url: '/api/dashboard/file/profileupload',\r\n            method: 'POST',\r\n\r\n            onload: (response) => {\r\n              console.log(response)\r\n              var file ={ \r\n                name: response,\r\n                username: this.props.user.username\r\n              }\r\n              Queries.uploadProfilePhoto(file)\r\n            },\r\n            onerror: (response) => response.data,\r\n            ondata: (formData) => {\r\n                formData.append('username', this.props.user.username);\r\n                return formData;\r\n            },\r\n          },\r\n            load: (source, load) => {\r\n                // simulates loading a file from the server\r\n                fetch(source).then(res => res.blob()).then(load);\r\n            },\r\n            remove: (source, load, error) => {\r\n\r\n             // var name = source.replace(`/uploadedimages/profile/`, '')      \r\n             \r\n             var file ={ \r\n              username: this.props.user.username\r\n            }\r\n            \r\n              // Should somehow send `source` to server so server can remove the file with this source\r\n              Queries.deleteAvatar(file)\r\n              // Can call the error method if something is wrong, should exit after\r\n              error('oh my goodness');\r\n  \r\n              // Should call the load method when done, no parameters required\r\n              load();\r\n          }\r\n          }}\r\n          imageResizeMode=\"cover\"\r\n          allowImageTransform={true}\r\n          allowImageCrop={true}\r\n          imageCropAspectRatio={\"1:1\"}\r\n          oninit={() => this.handleInit()}\r\n          imageTransformOutputQuality={65}\r\n          imageTransformOutputMimeType=\"image/jpeg\"\r\n          fileRenameFunction={file => {\r\n            n = this.makeid(25);\r\n            return n + file.extension;\r\n          }}\r\n          onupdatefiles={fileItems => {\r\n            //this.props.onupdatefiles({ files: fileItems.map(fileItem => fileItem.file) });\r\n             this.setState({ files: fileItems.map(fileItem => fileItem.file) });\r\n          }}\r\n          // onupdatefiles={this.props.onupdatefiles }\r\n          onDrop={this.props.handleUploadImages}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileUploader;\r\n"]},"metadata":{},"sourceType":"module"}