{"ast":null,"code":"import bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { PRIVATEKEY } from \"../../../config\";\nimport { User } from \"../../../models\";\nexport default (async (req, res) => {\n  if (req.method === \"POST\") {\n    const data = req.body.userData;\n    const salt = bcrypt.genSaltSync(10);\n    const hash = bcrypt.hashSync(data.password, salt);\n\n    try {\n      const user = await User.create({\n        email: data.email.toLowerCase(),\n        name: data.name,\n        username: data.username.toLowerCase(),\n        salt: salt,\n        password: hash\n      });\n      const payload = {\n        id: user.id,\n        username: user.username\n      };\n      let token = jwt.sign(payload, PRIVATEKEY);\n      res.json({\n        msg: \"ok\",\n        token: `${token}`,\n        user: user\n      }); // return res.status(200).json({ user, msg: 'account created successfully' });\n      //   return req.login(user, err => {\n      //     if (!err) {\n      //       return res.status(200).send(getUserProps(user));\n      //     }\n      //     return res.status(500).send({\n      //       message: 'Auth error',\n      //     });\n      //   });\n    } catch (err) {\n      return res.status(500).send(err);\n    }\n  } else {\n    res.status(400).json({\n      message: \"Not Authorised\"\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}