{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\src\\\\hottofindtest\\\\components\\\\dashboard\\\\profileFilePond.js\";\nvar __jsx = React.createElement;\n// Import React FilePond\nimport React, { useState, useEffect } from \"react\";\nimport { FilePond, registerPlugin } from \"react-filepond\"; // Import FilePond styles\n\nimport \"filepond/dist/filepond.min.css\";\nimport FilePondPluginFileRename from \"filepond-plugin-file-rename\";\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\nimport FilePondPluginImageCrop from \"filepond-plugin-image-crop\"; // Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\nimport FilePondPluginImageTransform from \"filepond-plugin-image-transform\";\nimport FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\";\nimport * as Queries from '../../utils/queries';\nimport { URL } from \"../../config\"; // Register the plugins\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageResize, FilePondPluginFileRename, FilePondPluginFileValidateSize, FilePondPluginFileValidateType, FilePondPluginImageCrop, FilePondPluginImageValidateSize, FilePondPluginImageTransform); // Our app\n\nclass FileUploader extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      if (this.props.user.avatar) {\n        var files = [];\n        files.push({\n          source: `${URL}/uploadedimages/profile/${this.props.user.avatar}`,\n          options: {\n            type: \"local\"\n          }\n        });\n        console.log(files);\n        this.setState({\n          files: files\n        });\n      }\n    });\n\n    _defineProperty(this, \"makeid\", length => {\n      var result = \"\";\n      var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    });\n\n    this.state = {\n      // Set initial files, type 'local' means this is a file\n      // that has already been uploaded to the server (see docs)\n      //  files: [\n      //     {\n      //       source: `${URL}/public/uploadedfiles/${this.props.files.name}`,\n      //       options: {\n      //         type: \"local\"\n      //       }\n      //     }\n      //  ]\n      files: []\n    };\n  }\n\n  handleInit() {\n    console.log(\"FilePond instance has initialised\");\n  }\n\n  render() {\n    var n;\n    return __jsx(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, __jsx(FilePond, {\n      ref: this.props.setRef,\n      files: this.state.files,\n      allowMultiple: false,\n      name: \"file\",\n      maxFiles: 1,\n      server: {\n        // process: \"/api/dashboard/file/profileupload\",\n        process: {\n          url: '/api/dashboard/file/profileupload',\n          method: 'POST',\n          onload: response => {\n            console.log(response);\n            var file = {\n              name: response.replace(`public/uploadedimages/`, ''),\n              username: this.props.user.username\n            };\n            Queries.uploadProfilePhoto(file);\n          },\n          onerror: response => response.data,\n          ondata: formData => {\n            formData.append('username', this.props.user.username);\n            return formData;\n          }\n        },\n        load: (source, load) => {\n          // simulates loading a file from the server\n          fetch(source).then(res => res.blob()).then(load);\n        },\n        remove: (source, load, error) => {\n          // var name = source.replace(`/uploadedimages/profile/`, '')            \n          // Should somehow send `source` to server so server can remove the file with this source\n          Queries.deleteFile(name); // Can call the error method if something is wrong, should exit after\n\n          error('oh my goodness'); // Should call the load method when done, no parameters required\n\n          load();\n        }\n      },\n      imageResizeMode: \"cover\",\n      allowImageTransform: true,\n      allowImageCrop: true,\n      imageCropAspectRatio: \"1:1\",\n      oninit: () => this.handleInit(),\n      imageTransformOutputQuality: 65,\n      imageTransformOutputMimeType: \"image/jpeg\",\n      fileRenameFunction: file => {\n        n = this.makeid(25);\n        return n + file.extension;\n      },\n      onupdatefiles: fileItems => {\n        //this.props.onupdatefiles({ files: fileItems.map(fileItem => fileItem.file) });\n        this.setState({\n          files: fileItems.map(fileItem => fileItem.file)\n        });\n      } // onupdatefiles={this.props.onupdatefiles }\n      ,\n      onDrop: this.props.handleUploadImages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default FileUploader;","map":{"version":3,"sources":["C:/src/hottofindtest/components/dashboard/profileFilePond.js"],"names":["React","useState","useEffect","FilePond","registerPlugin","FilePondPluginFileRename","FilePondPluginFileValidateSize","FilePondPluginFileValidateType","FilePondPluginImageCrop","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageResize","FilePondPluginImageTransform","FilePondPluginImageValidateSize","Queries","URL","FileUploader","Component","constructor","props","user","avatar","files","push","source","options","type","console","log","setState","length","result","characters","charactersLength","i","charAt","Math","floor","random","state","handleInit","render","n","setRef","process","url","method","onload","response","file","name","replace","username","uploadProfilePhoto","onerror","data","ondata","formData","append","load","fetch","then","res","blob","remove","error","deleteFile","makeid","extension","fileItems","map","fileItem","handleUploadImages"],"mappings":"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","sourcesContent":["// Import React FilePond\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { FilePond, registerPlugin } from \"react-filepond\";\r\n\r\n// Import FilePond styles\r\nimport \"filepond/dist/filepond.min.css\";\r\n\r\nimport FilePondPluginFileRename from \"filepond-plugin-file-rename\";\r\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\r\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\r\nimport FilePondPluginImageCrop from \"filepond-plugin-image-crop\";\r\n// Import the Image EXIF Orientation and Image Preview plugins\r\n// Note: These need to be installed separately\r\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\r\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\r\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\r\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\r\nimport FilePondPluginImageTransform from \"filepond-plugin-image-transform\";\r\nimport FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\";\r\n\r\nimport * as Queries from '../../utils/queries'\r\n\r\n\r\nimport { URL } from \"../../config\";\r\n\r\n// Register the plugins\r\nregisterPlugin(\r\n  FilePondPluginImageExifOrientation,\r\n  FilePondPluginImagePreview,\r\n  FilePondPluginImageResize,\r\n  FilePondPluginFileRename,\r\n  FilePondPluginFileValidateSize,\r\n  FilePondPluginFileValidateType,\r\n  FilePondPluginImageCrop,\r\n  FilePondPluginImageValidateSize,\r\n  FilePondPluginImageTransform\r\n);\r\n\r\n// Our app\r\nclass FileUploader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // Set initial files, type 'local' means this is a file\r\n      // that has already been uploaded to the server (see docs)\r\n      //  files: [\r\n      //     {\r\n      //       source: `${URL}/public/uploadedfiles/${this.props.files.name}`,\r\n      //       options: {\r\n      //         type: \"local\"\r\n      //       }\r\n      //     }\r\n      //  ]\r\n      files: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.user.avatar) {\r\n      var files = []\r\n      \r\n      files.push({\r\n        source: `${URL}/uploadedimages/profile/${this.props.user.avatar}`,\r\n          options: {\r\n            type: \"local\"\r\n          }\r\n      });\r\n\r\n      console.log(files)\r\n      this.setState({ files: files });\r\n    }\r\n  };\r\n\r\n  handleInit() {\r\n    console.log(\"FilePond instance has initialised\");\r\n  }\r\n\r\n  makeid = length => {\r\n    var result = \"\";\r\n    var characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  };\r\n\r\n  render() {\r\n    var n;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <FilePond\r\n          ref={this.props.setRef}\r\n          files={this.state.files}\r\n          allowMultiple={false}\r\n          name={\"file\"}\r\n          maxFiles={1}\r\n          server={{\r\n           // process: \"/api/dashboard/file/profileupload\",\r\n           process: {\r\n            url: '/api/dashboard/file/profileupload',\r\n            method: 'POST',\r\n\r\n            onload: (response) => {\r\n              console.log(response)\r\n              var file ={ \r\n                name: response.replace(`public/uploadedimages/`, ''),\r\n                username: this.props.user.username\r\n              }\r\n              Queries.uploadProfilePhoto(file)\r\n            },\r\n            onerror: (response) => response.data,\r\n            ondata: (formData) => {\r\n                formData.append('username', this.props.user.username);\r\n                return formData;\r\n            },\r\n          },\r\n            load: (source, load) => {\r\n                // simulates loading a file from the server\r\n                fetch(source).then(res => res.blob()).then(load);\r\n            },\r\n            remove: (source, load, error) => {\r\n\r\n             // var name = source.replace(`/uploadedimages/profile/`, '')            \r\n            \r\n              // Should somehow send `source` to server so server can remove the file with this source\r\n              Queries.deleteFile(name)\r\n              // Can call the error method if something is wrong, should exit after\r\n              error('oh my goodness');\r\n  \r\n              // Should call the load method when done, no parameters required\r\n              load();\r\n          }\r\n          }}\r\n          imageResizeMode=\"cover\"\r\n          allowImageTransform={true}\r\n          allowImageCrop={true}\r\n          imageCropAspectRatio={\"1:1\"}\r\n          oninit={() => this.handleInit()}\r\n          imageTransformOutputQuality={65}\r\n          imageTransformOutputMimeType=\"image/jpeg\"\r\n          fileRenameFunction={file => {\r\n            n = this.makeid(25);\r\n            return n + file.extension;\r\n          }}\r\n          onupdatefiles={fileItems => {\r\n            //this.props.onupdatefiles({ files: fileItems.map(fileItem => fileItem.file) });\r\n             this.setState({ files: fileItems.map(fileItem => fileItem.file) });\r\n          }}\r\n          // onupdatefiles={this.props.onupdatefiles }\r\n          onDrop={this.props.handleUploadImages}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileUploader;\r\n"]},"metadata":{},"sourceType":"module"}