{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n// Import React FilePond\nimport React, { useState, useEffect } from \"react\";\nimport { FilePond, registerPlugin } from \"react-filepond\"; // Import FilePond styles\n\nimport \"filepond/dist/filepond.min.css\";\nimport FilePondPluginFileRename from \"filepond-plugin-file-rename\";\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\nimport FilePondPluginImageCrop from \"filepond-plugin-image-crop\"; // Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\nimport FilePondPluginImageTransform from \"filepond-plugin-image-transform\";\nimport FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\";\nimport * as Queries from '../../utils/queries';\nimport { URL } from \"../../config\"; // Register the plugins\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageResize, FilePondPluginFileRename, FilePondPluginFileValidateSize, FilePondPluginFileValidateType, FilePondPluginImageCrop, FilePondPluginImageValidateSize, FilePondPluginImageTransform); // Our app\n\nclass FileUploader extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      if (this.props.user.avatar) {\n        var files = [];\n        files.push({\n          source: `${URL}/uploadedimages/profile/${this.props.user.avatar}`,\n          options: {\n            type: \"local\"\n          }\n        });\n        console.log(files);\n        this.setState({\n          files: files\n        });\n      }\n    });\n\n    _defineProperty(this, \"makeid\", length => {\n      var result = \"\";\n      var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    });\n\n    this.state = {\n      // Set initial files, type 'local' means this is a file\n      // that has already been uploaded to the server (see docs)\n      //  files: [\n      //     {\n      //       source: `${URL}/public/uploadedfiles/${this.props.files.name}`,\n      //       options: {\n      //         type: \"local\"\n      //       }\n      //     }\n      //  ]\n      files: []\n    };\n  }\n\n  handleInit() {\n    console.log(\"FilePond instance has initialised\");\n  }\n\n  render() {\n    var n;\n    return __jsx(\"div\", {\n      className: \"App\"\n    }, __jsx(FilePond, {\n      ref: this.props.setRef,\n      files: this.state.files,\n      allowMultiple: false,\n      name: \"file\",\n      maxFiles: 1,\n      server: {\n        // process: \"/api/dashboard/file/profileupload\",\n        process: {\n          url: '/api/dashboard/file/profileupload',\n          method: 'POST',\n          onload: response => {\n            console.log(response);\n            var file = {\n              name: response,\n              username: this.props.user.username\n            };\n            Queries.uploadProfilePhoto(file);\n          },\n          onerror: response => response.data,\n          ondata: formData => {\n            formData.append('username', this.props.user.username);\n            return formData;\n          }\n        },\n        load: (source, load) => {\n          // simulates loading a file from the server\n          fetch(source).then(res => res.blob()).then(load);\n        },\n        remove: (source, load, error) => {\n          // var name = source.replace(`/uploadedimages/profile/`, '')      \n          var file = {\n            username: this.props.user.username\n          }; // Should somehow send `source` to server so server can remove the file with this source\n\n          Queries.deleteAvatar(file); // Can call the error method if something is wrong, should exit after\n\n          error('oh my goodness'); // Should call the load method when done, no parameters required\n\n          load();\n        }\n      },\n      imageResizeMode: \"cover\",\n      allowImageTransform: true,\n      allowImageCrop: true,\n      imageCropAspectRatio: \"1:1\",\n      oninit: () => this.handleInit(),\n      imageTransformOutputQuality: 65,\n      imageTransformOutputMimeType: \"image/jpeg\",\n      fileRenameFunction: file => {\n        n = this.makeid(25);\n        return n + file.extension;\n      },\n      onupdatefiles: fileItems => {\n        //this.props.onupdatefiles({ files: fileItems.map(fileItem => fileItem.file) });\n        this.setState({\n          files: fileItems.map(fileItem => fileItem.file)\n        });\n      } // onupdatefiles={this.props.onupdatefiles }\n      ,\n      onDrop: this.props.handleUploadImages\n    }));\n  }\n\n}\n\nexport default FileUploader;","map":null,"metadata":{},"sourceType":"module"}