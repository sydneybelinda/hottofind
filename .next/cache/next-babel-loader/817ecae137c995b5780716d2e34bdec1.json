{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport jwt from 'jsonwebtoken';\nimport { PRIVATEKEY } from '../../config';\nimport { User } from '../../models';\nexport default (async (req, res) => {\n  if (!('authorization' in req.headers)) {//    return res.status(401).send('Authorization header missing')\n  }\n\n  const auth = await req.headers.authorization; //const { token } = JSON.parse(auth)\n  //const auth = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNTcyMzIwMjc0fQ.9mxc0ep2kH7mzyRlbKYmYpEa5cQXUmUC4kiH1lGsNhY'\n\n  const decoded = jwt.verify(auth, PRIVATEKEY); //const dejson = JSON.parse(decoded)\n\n  try {\n    const getUser = async obj => {\n      return await User.findOne({\n        where: obj\n      });\n    };\n\n    let data = await getUser({\n      id: decoded.id\n    });\n\n    if (data) {\n      //const data = Object.assign({}, { username: user.username }, js)\n      return res.status(200).json({\n        data\n      }); //  next(null, user);\n    } else {\n      const error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  } catch (error) {\n    const {\n      response\n    } = error;\n    return response ? res.status(response.status).json({\n      message: response.statusText\n    }) : res.status(400).json({\n      message: error.message\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}