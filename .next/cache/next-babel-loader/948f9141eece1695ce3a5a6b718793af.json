{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\src\\\\hottofindtest\\\\components\\\\dashboard\\\\filePond.js\";\nvar __jsx = React.createElement;\n// Import React FilePond\nimport FilePondPluginFileRename from \"filepond-plugin-file-rename\";\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\nimport FilePondPluginImageCrop from \"filepond-plugin-image-crop\"; // Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\nimport FilePondPluginImageTransform from \"filepond-plugin-image-transform\";\nimport FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\"; // Import FilePond styles\n\nimport \"filepond/dist/filepond.min.css\";\nimport React from \"react\";\nimport { FilePond, registerPlugin } from \"react-filepond\";\nimport { URL } from \"../../config\";\nimport * as Queries from \"../../utils/queries\"; // Register the plugins\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageResize, FilePondPluginFileRename, FilePondPluginFileValidateSize, FilePondPluginFileValidateType, FilePondPluginImageCrop, FilePondPluginImageValidateSize, FilePondPluginImageTransform); // Our app\n\nvar FileUploader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FileUploader, _React$Component);\n\n  function FileUploader(props) {\n    var _this;\n\n    _classCallCheck(this, FileUploader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileUploader).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      if (_this.props.files) {\n        var files = [];\n\n        _this.props.files.map(function (file) {\n          files.push({\n            source: \"\".concat(URL, \"/uploadedimages/\").concat(file.name),\n            options: {\n              type: \"local\"\n            }\n          });\n        });\n\n        _this.setState({\n          files: files\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeid\", function (length) {\n      var result = \"\";\n      var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    });\n\n    _this.state = {\n      // Set initial files, type 'local' means this is a file\n      // that has already been uploaded to the server (see docs)\n      //  files: [\n      //     {\n      //       source: `${URL}/public/uploadedfiles/${this.props.files.name}`,\n      //       options: {\n      //         type: \"local\"\n      //       }\n      //     }\n      //  ]\n      files: []\n    };\n    return _this;\n  }\n\n  _createClass(FileUploader, [{\n    key: \"handleInit\",\n    value: function handleInit() {\n      console.log(\"FilePond instance has initialised\", this.pond);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var n;\n      return __jsx(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, __jsx(FilePond, {\n        ref: this.props.setRef,\n        files: this.state.files,\n        allowMultiple: true,\n        name: \"file\",\n        maxFiles: 10,\n        server: {\n          process: \"/api/dashboard/file/postupload\",\n          load: function load(source, _load) {\n            fetch(source).then(function (res) {\n              return res.blob();\n            }).then(_load);\n          },\n          remove: function remove(source, load, error) {\n            var name = source.replace(\"\".concat(URL, \"/uploadedimages/\"), \"\");\n            Queries.deleteFile(name);\n            error(\"oh my goodness\");\n            load();\n          }\n        },\n        imageResizeMode: \"cover\",\n        allowImageTransform: true,\n        allowImageCrop: true,\n        imageCropAspectRatio: \"1:1\",\n        oninit: function oninit() {\n          return _this2.handleInit();\n        },\n        imageTransformOutputQuality: 65,\n        imageTransformOutputMimeType: \"image/jpeg\",\n        fileRenameFunction: function fileRenameFunction(file) {\n          n = _this2.makeid(25);\n          return n + file.extension;\n        },\n        onupdatefiles: function onupdatefiles(fileItems) {\n          _this2.setState({\n            files: fileItems.map(function (fileItem) {\n              return fileItem.file;\n            })\n          });\n        } // onupdatefiles={this.props.onupdatefiles }\n        ,\n        onDrop: this.props.handleUploadImages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FileUploader;\n}(React.Component);\n\nexport default FileUploader;","map":{"version":3,"sources":["C:/src/hottofindtest/components/dashboard/filePond.js"],"names":["FilePondPluginFileRename","FilePondPluginFileValidateSize","FilePondPluginFileValidateType","FilePondPluginImageCrop","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageResize","FilePondPluginImageTransform","FilePondPluginImageValidateSize","React","FilePond","registerPlugin","URL","Queries","FileUploader","props","files","map","file","push","source","name","options","type","setState","length","result","characters","charactersLength","i","charAt","Math","floor","random","state","console","log","pond","n","setRef","process","load","fetch","then","res","blob","remove","error","replace","deleteFile","handleInit","makeid","extension","fileItems","fileItem","handleUploadImages","Component"],"mappings":"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","sourcesContent":["// Import React FilePond\r\nimport FilePondPluginFileRename from \"filepond-plugin-file-rename\";\r\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\r\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\r\nimport FilePondPluginImageCrop from \"filepond-plugin-image-crop\";\r\n// Import the Image EXIF Orientation and Image Preview plugins\r\n// Note: These need to be installed separately\r\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\r\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\r\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\r\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\r\nimport FilePondPluginImageTransform from \"filepond-plugin-image-transform\";\r\nimport FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\";\r\n// Import FilePond styles\r\nimport \"filepond/dist/filepond.min.css\";\r\nimport React from \"react\";\r\nimport { FilePond, registerPlugin } from \"react-filepond\";\r\nimport { URL } from \"../../config\";\r\nimport * as Queries from \"../../utils/queries\";\r\n\r\n// Register the plugins\r\nregisterPlugin(\r\n  FilePondPluginImageExifOrientation,\r\n  FilePondPluginImagePreview,\r\n  FilePondPluginImageResize,\r\n  FilePondPluginFileRename,\r\n  FilePondPluginFileValidateSize,\r\n  FilePondPluginFileValidateType,\r\n  FilePondPluginImageCrop,\r\n  FilePondPluginImageValidateSize,\r\n  FilePondPluginImageTransform\r\n);\r\n\r\n// Our app\r\nclass FileUploader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // Set initial files, type 'local' means this is a file\r\n      // that has already been uploaded to the server (see docs)\r\n      //  files: [\r\n      //     {\r\n      //       source: `${URL}/public/uploadedfiles/${this.props.files.name}`,\r\n      //       options: {\r\n      //         type: \"local\"\r\n      //       }\r\n      //     }\r\n      //  ]\r\n      files: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.files) {\r\n      var files = [];\r\n      this.props.files.map(file => {\r\n        files.push({\r\n          source: `${URL}/uploadedimages/${file.name}`,\r\n          options: {\r\n            type: \"local\"\r\n          }\r\n        });\r\n      });\r\n\r\n      this.setState({ files: files });\r\n    }\r\n  };\r\n\r\n  handleInit() {\r\n    console.log(\"FilePond instance has initialised\", this.pond);\r\n  }\r\n\r\n  makeid = length => {\r\n    var result = \"\";\r\n    var characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  };\r\n\r\n  render() {\r\n    var n;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <FilePond\r\n          ref={this.props.setRef}\r\n          files={this.state.files}\r\n          allowMultiple={true}\r\n          name={\"file\"}\r\n          maxFiles={10}\r\n          server={{\r\n            process: \"/api/dashboard/file/postupload\",\r\n\r\n            load: (source, load) => {\r\n              fetch(source)\r\n                .then(res => res.blob())\r\n                .then(load);\r\n            },\r\n            remove: (source, load, error) => {\r\n              var name = source.replace(`${URL}/uploadedimages/`, \"\");\r\n\r\n              Queries.deleteFile(name);\r\n\r\n              error(\"oh my goodness\");\r\n\r\n              load();\r\n            }\r\n          }}\r\n          imageResizeMode=\"cover\"\r\n          allowImageTransform={true}\r\n          allowImageCrop={true}\r\n          imageCropAspectRatio={\"1:1\"}\r\n          oninit={() => this.handleInit()}\r\n          imageTransformOutputQuality={65}\r\n          imageTransformOutputMimeType=\"image/jpeg\"\r\n          fileRenameFunction={file => {\r\n            n = this.makeid(25);\r\n            return n + file.extension;\r\n          }}\r\n          onupdatefiles={fileItems => {\r\n            this.setState({ files: fileItems.map(fileItem => fileItem.file) });\r\n          }}\r\n          // onupdatefiles={this.props.onupdatefiles }\r\n          onDrop={this.props.handleUploadImages}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileUploader;\r\n"]},"metadata":{},"sourceType":"module"}