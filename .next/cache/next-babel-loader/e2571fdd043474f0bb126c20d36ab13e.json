{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Post } from '../../../models';\nimport { File } from '../../../models';\nexport default (async (req, res) => {\n  const {\n    query: {\n      catindex,\n      keyindex,\n      countrycode,\n      city,\n      page = 1\n    }\n  } = req;\n  const order = '';\n  const limit = 100;\n  const offset = limit * (page - 1);\n  let where = {\n    country: countrycode\n  };\n\n  if (catindex) {\n    var ci = {\n      catindex: catindex\n    };\n    where = _objectSpread({}, where, {}, ci);\n  }\n\n  if (keyindex) {\n    var ki = {\n      keyindex: keyindex\n    };\n    where = _objectSpread({}, where, {}, ki);\n  }\n\n  if (city) {\n    var cty = {\n      cities: city\n    };\n    where = _objectSpread({}, where, {}, cty);\n  }\n\n  try {\n    const posts = await Post.findAndCountAll({\n      where: where,\n      include: [{\n        model: File,\n        as: 'files'\n      }],\n      order: [['createdAt', 'DESC']],\n      limit: limit,\n      offset: offset\n    }); //   const posts = await Post.findAndCountAll({\n    //     where: where,\n    //     order: [['createdAt', 'DESC']],\n    //     limit: 40,\n    //     offset: offset,\n    // })\n\n    if (!posts) {\n      return res.status(404).send({\n        message: '404 posts'\n      });\n    }\n\n    return res.status(200).send(posts); // return res.json({ categories });\n  } catch (err) {\n    console.log(err);\n    return res.status(500).send(err);\n  }\n});","map":{"version":3,"sources":["C:/src/hottofindtest/pages/api/posts/get.js"],"names":["Post","File","req","res","query","catindex","keyindex","countrycode","city","page","order","limit","offset","where","country","ci","ki","cty","cities","posts","findAndCountAll","include","model","as","status","send","message","err","console","log"],"mappings":";;;;;;;;;;;;AAAA,SAASA,IAAT,QAAqB,iBAArB;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAE/B,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA,WAAtB;AAAmCC,MAAAA,IAAnC;AAAyCC,MAAAA,IAAI,GAAG;AAAhD;AADH,MAEFP,GAFJ;AAIA,QAAMQ,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,GAAd;AACA,QAAMC,MAAM,GAAGD,KAAK,IAAIF,IAAI,GAAC,CAAT,CAApB;AAEI,MAAII,KAAK,GAAG;AAACC,IAAAA,OAAO,EAAEP;AAAV,GAAZ;;AAEA,MAAGF,QAAH,EAAY;AACR,QAAIU,EAAE,GAAG;AAACV,MAAAA,QAAQ,EAAEA;AAAX,KAAT;AAEAQ,IAAAA,KAAK,qBACDA,KADC,MAEDE,EAFC,CAAL;AAIP;;AACG,MAAGT,QAAH,EAAY;AACR,QAAIU,EAAE,GAAG;AAACV,MAAAA,QAAQ,EAAEA;AAAX,KAAT;AAEAO,IAAAA,KAAK,qBACDA,KADC,MAEDG,EAFC,CAAL;AAIP;;AAGD,MAAIR,IAAJ,EAAS;AACL,QAAIS,GAAG,GAAG;AAACC,MAAAA,MAAM,EAAEV;AAAT,KAAV;AAEAK,IAAAA,KAAK,qBACAA,KADA,MAEAI,GAFA,CAAL;AAKA;;AAEJ,MAAI;AACA,UAAME,KAAK,GAAG,MAAMnB,IAAI,CAACoB,eAAL,CAAqB;AACrCP,MAAAA,KAAK,EAAEA,KAD8B;AAErCQ,MAAAA,OAAO,EAAE,CACL;AACEC,QAAAA,KAAK,EAAErB,IADT;AAECsB,QAAAA,EAAE,EAAE;AAFL,OADK,CAF4B;AAQlCb,MAAAA,KAAK,EAAE,CAAC,CAAC,WAAD,EAAc,MAAd,CAAD,CAR2B;AASlCC,MAAAA,KAAK,EAAEA,KAT2B;AAUlCC,MAAAA,MAAM,EAAEA;AAV0B,KAArB,CAApB,CADA,CAcF;AACA;AACA;AACA;AACA;AACA;;AAEE,QAAI,CAACO,KAAL,EAAY;AACV,aAAOhB,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE;AADiB,OAArB,CAAP;AAGD;;AAED,WAAOvB,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,KAArB,CAAP,CA3BA,CA4BF;AACC,GA7BH,CA6BI,OAAOQ,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACF,WAAOxB,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,GAArB,CAAP;AACD;AACJ,CAzEH","sourcesContent":["import { Post } from '../../../models';\r\nimport { File } from '../../../models';\r\n\r\nexport default async (req, res) => {\r\n\r\n    const {\r\n      query: { catindex, keyindex, countrycode, city, page = 1 },\r\n    } = req\r\n  \r\n    const order = ''\r\n    const limit = 100\r\n    const offset = limit * (page-1)\r\n\r\n        let where = {country: countrycode}\r\n\r\n        if(catindex){\r\n            var ci = {catindex: catindex}\r\n\r\n            where = {\r\n             ...where,\r\n             ...ci\r\n        }\r\n    }\r\n        if(keyindex){\r\n            var ki = {keyindex: keyindex}\r\n\r\n            where = {\r\n             ...where,\r\n             ...ki\r\n        }\r\n    }\r\n\r\n    \r\n    if (city){\r\n        var cty = {cities: city}\r\n\r\n        where = {\r\n          ...where,\r\n          ...cty\r\n        }\r\n\r\n       }\r\n\r\n    try {\r\n        const posts = await Post.findAndCountAll({\r\n            where: where,\r\n            include: [\r\n                {\r\n                  model: File,\r\n                 as: 'files'\r\n               }\r\n              ],\r\n               order: [['createdAt', 'DESC']],\r\n               limit: limit,\r\n               offset: offset,\r\n        });\r\n\r\n      //   const posts = await Post.findAndCountAll({\r\n      //     where: where,\r\n      //     order: [['createdAt', 'DESC']],\r\n      //     limit: 40,\r\n      //     offset: offset,\r\n      // })\r\n\r\n        if (!posts) {\r\n          return res.status(404).send({\r\n            message: '404 posts',\r\n          });\r\n        }\r\n  \r\n        return res.status(200).send(posts);\r\n      // return res.json({ categories });\r\n      } catch (err) {\r\n          console.log(err)\r\n        return res.status(500).send(err);\r\n      }\r\n  }"]},"metadata":{},"sourceType":"module"}