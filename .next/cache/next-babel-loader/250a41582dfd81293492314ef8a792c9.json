{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Post } from '../../../models';\nimport { File } from '../../../models';\nexport default (async (req, res) => {\n  console.log(req);\n  const {\n    query: {\n      catindex,\n      keyindex,\n      countrycode,\n      city,\n      page = 1\n    }\n  } = req;\n  const order = '';\n  const limit = 100; //  const offset = limit * (page-1)\n\n  let where = {\n    country: countrycode\n  };\n\n  if (catindex) {\n    var ci = {\n      catindex: catindex\n    };\n    where = _objectSpread({}, where, {}, ci);\n  }\n\n  if (keyindex) {\n    var ki = {\n      keyindex: keyindex\n    };\n    where = _objectSpread({}, where, {}, ki);\n  }\n\n  if (city) {\n    var cty = {\n      cities: city\n    };\n    where = _objectSpread({}, where, {}, cty);\n  }\n\n  try {\n    const posts = await Post.findAndCountAll({\n      where: where,\n      include: [{\n        model: File,\n        as: 'files'\n      }],\n      order: [['createdAt', 'DESC']],\n      limit: limit //  offset: offset,\n\n    }); //   const posts = await Post.findAndCountAll({\n    //     where: where,\n    //     order: [['createdAt', 'DESC']],\n    //     limit: 40,\n    //     offset: offset,\n    // })\n\n    if (!posts) {\n      return res.status(404).send({\n        message: '404 posts'\n      });\n    }\n\n    return res.status(200).send(posts); // return res.json({ categories });\n  } catch (err) {\n    console.log(err);\n    return res.status(500).send(err);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}