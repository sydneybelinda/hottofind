{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Link from \"next/link\";\nimport React from \"react\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"inline-block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    cursor: \"pointer\"\n  },\n  paper: {\n    marginRight: theme.spacing(2)\n  },\n  mItem: {\n    lineHeight: \"10px\"\n  },\n  lnk: {\n    fontFamily: \"'Montserrat', sans-serif\",\n    textDecoration: \"none\",\n    textTransform: \"uppercase\",\n    padding: \"0 10px\",\n    fontSize: \"12px\",\n    fontWeight: \"600\",\n    display: \"block\",\n    lineHeight: \"30px\",\n    height: \"30px\",\n    letterSpacing: \".08em\",\n    color: \"white\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    [theme.breakpoints.down(\"md\")]: {\n      fontSize: \"7px\"\n    },\n    textOverflow: \"ellipsis\",\n    \"&:hover\": {\n      color: \"#009b9b\"\n    }\n  },\n  lnkb: {\n    fontFamily: \"'Montserrat', sans-serif\",\n    textDecoration: \"none\",\n    padding: \"0 10px\",\n    fontSize: \"12px\",\n    fontWeight: \"600\",\n    display: \"block\",\n    lineHeight: \"30px\",\n    height: \"30px\",\n    letterSpacing: \".12em\",\n    color: \"black\",\n    \"&:hover\": {\n      color: \"#009b9b\"\n    }\n  },\n  itm: {\n    paddingTop: \"0\",\n    paddingBottom: \"0\"\n  }\n}));\nexport default function MenuListComposition(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  } // return focus to the button when we transitioned from !open -> open\n\n\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.mItem,\n    onMouseEnter: handleToggle,\n    onMouseLeave: handleToggle\n  }, __jsx(\"a\", {\n    className: classes.lnk,\n    ref: anchorRef\n  }, props.name), __jsx(Popper, {\n    open: open,\n    anchorEl: anchorRef.current,\n    role: undefined,\n    transition: true,\n    disablePortal: true\n  }, ({\n    TransitionProps,\n    placement\n  }) => __jsx(Grow, _extends({}, TransitionProps, {\n    style: {\n      transformOrigin: placement === \"bottom\" ? \"center top\" : \"center bottom\"\n    }\n  }), __jsx(Paper, null, __jsx(ClickAwayListener, {\n    onClickAway: handleClose\n  }, __jsx(MenuList, {\n    autoFocusItem: open,\n    id: \"menu-list-grow\",\n    onKeyDown: handleListKeyDown\n  }, __jsx(MenuItem, {\n    onClick: handleClose,\n    className: classes.itm\n  }, __jsx(Link, {\n    href: `/posts/[catindex]`,\n    as: `/posts/${props.url}`\n  }, __jsx(\"a\", {\n    className: classes.lnkb\n  }, \"ALL \", props.name.toUpperCase()))), props.categories ? props.categories.map((prop, key) => {\n    if (prop.catindex == props.url) {\n      return __jsx(MenuItem, {\n        onClick: handleClose,\n        key: prop.catindex + \"-\" + prop.keyindex,\n        className: classes.itm\n      }, __jsx(Link, {\n        href: `/posts/[catindex]/[keyindex]`,\n        as: `/posts/${props.url}/${prop.keyindex}`\n      }, __jsx(\"a\", {\n        className: classes.lnkb\n      }, prop.subcategory)));\n    }\n  }) : \"\")))))));\n}","map":null,"metadata":{},"sourceType":"module"}