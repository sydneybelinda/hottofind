{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport dynamic from \"next/dynamic\";\nimport Router from \"next/router\";\nimport React from \"react\";\nimport * as Queries from \"../../utils/queries\";\nimport SimpleSelect from \"./simpleSelect\"; // const UploadComponent = dynamic(() => import(\"./uploadcomponent\"), {\n//   ssr: false\n// });\n\nconst ProfileFilePond = dynamic(() => import(\"./profileFilePond\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./profileFilePond\")],\n    modules: [\"./profileFilePond\"]\n  }\n});\n\nconst styles = theme => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\",\n    // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n});\n\nclass ProfileForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_handleChangeCountry\", e => {\n      this.setState({\n        cities: \"\"\n      });\n      this.setState({\n        country: e.target.value\n      });\n\n      const filter = (tag, arr) => arr.filter(ct => ct.countrycode === tag);\n\n      const filtered = filter(e.target.value, this.props.citydata);\n      var cts = [];\n      filtered.map(ct => {\n        cts.push({\n          label: ct.city,\n          value: ct.city.toLowerCase()\n        });\n      });\n      this.setState({\n        citydata: cts\n      });\n    });\n\n    _defineProperty(this, \"_handleChangeCity\", e => {\n      this.setState({\n        city: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        errors: \"\"\n      });\n      var fs = [];\n      this.ref1.getFiles().map(fileItem => fileItem.file).forEach(file => {\n        var name = file.name.split(\".\")[0];\n        var fileName = `${name}.jpg`;\n        fs.push({\n          name: fileName,\n          owner: this.props.user.username\n        });\n      });\n      this.handleSave;\n    });\n\n    _defineProperty(this, \"handleSave\", async event => {\n      event.preventDefault();\n      this.setState({\n        error: \"\"\n      });\n\n      try {\n        let response = await Queries.submitProfile(this.state);\n\n        if (response.status === 200) {\n          Router.push(\"/profile\");\n        } else {\n          console.log(\"Edit failed.\"); // https://github.com/developit/unfetch#caveats\n\n          let error = new Error(response.statusText);\n          error.response = response;\n          const json = await response.json();\n          const resperrors = json.errors[0].message;\n          this.setState({\n            error: resperrors || error.message\n          });\n          throw error;\n        }\n      } catch (error) {\n        console.error(\"You have an error in your code or there are Network issues.\", error);\n        const {\n          response\n        } = error; //   this.setState({\n        //     error:  response ? response.statusText : error.message\n        //   })\n      }\n    });\n\n    const user = this.props.userdata;\n    var mca = [];\n    var countries = [];\n    this.props.citydata.map(c => {\n      if (mca.indexOf(c.countrycode) === -1) {\n        mca.push(c.countrycode);\n        countries.push({\n          label: c.country,\n          value: c.countrycode\n        });\n      }\n    });\n\n    if (user.city) {\n      var cities = [];\n      this.props.citydata.map(ct => {\n        cities.push({\n          label: ct.city,\n          value: ct.city.toLowerCase()\n        });\n      });\n    }\n\n    this.ref1 = React.createRef();\n    this.state = {\n      username: user.username,\n      name: user.name || \"\",\n      email: user.email || \"\",\n      address1: user.address1 || \"\",\n      address2: user.address2 || \"\",\n      city: user.city || \"\",\n      state: user.state || \"\",\n      country: user.country || \"\",\n      postcode: user.postcode || \"\",\n      avatar: user.avatar || \"\",\n      error: \"\",\n      citydata: cities || [],\n      countries: countries,\n      error: \"\"\n    };\n  }\n\n  onUpdateFiles(fileItems) {}\n\n  render() {\n    const user = this.props.user;\n    const post = this.props.post || [];\n    const {\n      classes\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"form\", {\n      noValidate: true,\n      onSubmit: this.handleSave\n    }, __jsx(Grid, {\n      container: true,\n      spacing: 3\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3\n    }, \"Photo\", __jsx(\"div\", {\n      style: {\n        backgroundImage: `url('${user.avatar}')`,\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center top\",\n        maxHeight: \"490px\",\n        minHeight: \"310px\"\n      }\n    }, __jsx(ProfileFilePond, {\n      onupdatefiles: this.onUpdateFiles.bind(this),\n      setRef: ref => this.ref1 = ref //    files={this.props.post.files}\n      ,\n      handleUploadImages: this.handleUploadImages,\n      user: this.props.userdata\n    }))), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 9\n    }, __jsx(Grid, {\n      container: true,\n      spacing: 3\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      gutterBottom: true\n    }, \"Update Personal Details\")), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6\n    }, __jsx(TextField, {\n      required: true,\n      id: \"name\",\n      name: \"name\",\n      label: \"Name\",\n      fullWidth: true,\n      autoComplete: \"name\",\n      value: this.state.name,\n      onChange: event => this.setState({\n        name: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6\n    }, __jsx(TextField, {\n      required: true,\n      id: \"email\",\n      name: \"email\",\n      label: \"Email Address\",\n      fullWidth: true,\n      autoComplete: \"email\",\n      value: this.state.email,\n      onChange: event => this.setState({\n        email: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6\n    }, __jsx(TextField, {\n      required: true,\n      id: \"address1\",\n      name: \"address1\",\n      label: \"Address line 1\",\n      fullWidth: true,\n      autoComplete: \"billing address-line1\",\n      value: this.state.address1,\n      onChange: event => this.setState({\n        address1: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6\n    }, __jsx(TextField, {\n      id: \"address2\",\n      name: \"address2\",\n      label: \"Address line 2\",\n      fullWidth: true,\n      autoComplete: \"address2\",\n      value: this.state.address2,\n      onChange: event => this.setState({\n        address2: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6\n    }, __jsx(SimpleSelect, {\n      options: this.state.countries,\n      value: this.state.country,\n      placeholder: \"Country\",\n      name: \"country\",\n      onChange: this._handleChangeCountry\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6\n    }, __jsx(SimpleSelect, {\n      options: this.state.citydata,\n      value: this.state.city,\n      placeholder: \"City\",\n      name: \"city\",\n      onChange: event => this.setState({\n        city: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6\n    }, __jsx(TextField, {\n      id: \"state\",\n      name: \"state\",\n      label: \"State/Province/Region\",\n      fullWidth: true,\n      value: this.state.state,\n      onChange: event => this.setState({\n        state: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6\n    }, __jsx(TextField, {\n      required: true,\n      id: \"postcode\",\n      name: \"postcode\",\n      label: \"Zip / Postal code\",\n      fullWidth: true,\n      autoComplete: \"postcode\",\n      value: this.state.postcode,\n      onChange: event => this.setState({\n        postcode: event.target.value\n      })\n    }))), __jsx(Grid, {\n      item: true,\n      xs: 12\n    }, __jsx(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.submit\n    }, \"Submit\")))), this.state.error ? __jsx(\"p\", {\n      className: \"error\"\n    }, \"Error: \", this.state.error) : \"\"));\n  }\n\n}\n\nexport default withStyles(styles)(ProfileForm);","map":null,"metadata":{},"sourceType":"module"}