{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Router from \"next/router\";\nimport SimpleSelect from \"./simpleSelect\";\nimport dynamic from \"next/dynamic\";\nimport { COUNTRYCODE } from \"../../config\"; // const UploadComponent = dynamic(() => import(\"./uploadcomponent\"), {\n//   ssr: false\n// });\n\nconst FilePond = dynamic(() => import(\"./filePond\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./filePond\")],\n    modules: [\"./filePond\"]\n  }\n});\n\nconst styles = theme => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\",\n    // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n});\n\nclass PostForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      var mc = [];\n      var mainCats = [];\n      this.props.categories.map(cat => {\n        if (mc.indexOf(cat.maincategory) === -1) {\n          mc.push(cat.maincategory);\n          mainCats.push({\n            label: cat.maincategory,\n            value: cat.catindex\n          });\n        }\n      });\n      this.setState({\n        maincategories: mainCats\n      });\n\n      if (this.state.keyindex) {\n        const filter = (tag, arr) => arr.filter(cat => cat.catindex === tag);\n\n        const filtered = filter(this.state.catindex, this.props.categories);\n        var subCats = [];\n        filtered.map(cat => {\n          subCats.push({\n            label: cat.subcategory,\n            value: cat.keyindex\n          });\n        });\n        this.setState({\n          subcategories: subCats\n        });\n      }\n\n      var cities = [];\n      this.props.citydata.map(ct => {\n        cities.push({\n          label: ct.city,\n          value: ct.city.toLowerCase()\n        });\n      });\n      this.setState({\n        citydata: cities\n      });\n    });\n\n    _defineProperty(this, \"_handleChangeCity\", e => {\n      this.setState({\n        cities: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"_handleChangeCategory\", e => {\n      this.setState({\n        keyindex: \"\"\n      });\n      this.setState({\n        catindex: e.target.value\n      });\n\n      const filter = (tag, arr) => arr.filter(cat => cat.catindex === tag);\n\n      const filtered = filter(e.target.value, this.props.categories);\n      var subCats = [];\n      filtered.map(cat => {\n        subCats.push({\n          label: cat.subcategory,\n          value: cat.keyindex\n        });\n      });\n      this.setState({\n        subcategories: subCats\n      });\n    });\n\n    _defineProperty(this, \"_handleChangeSubCategory\", e => {\n      this.setState({\n        keyindex: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        error: \"\"\n      });\n      var fs = []; //var myJSON = JSON.stringify(this.ref1);\n      //console.log(`ref1: ${myJSON}`)\n\n      this.ref1.getFiles().map(fileItem => fileItem.file).forEach(file => {\n        var name = file.name.split('.')[0];\n        var fileName = `${name}.jpg`; //  formData.append(fieldName, file, file.name);\n        //  console.log(file.name);\n\n        fs.push({\n          name: fileName,\n          owner: this.props.user.username\n        });\n      });\n      this.setState({\n        uploads: fs\n      }, this.handleSave);\n    });\n\n    _defineProperty(this, \"handleSave\", async event => {\n      const url = \"/api/dashboard/post/edit\";\n\n      try {\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: _JSON$stringify(this.state)\n        });\n\n        if (response.status === 200) {\n          Router.push(\"/dashboard\");\n        } else {\n          console.log(\"Edit failed.\"); // https://github.com/developit/unfetch#caveats\n\n          let error = new Error(response.statusText);\n          error.response = response;\n          throw error;\n        }\n      } catch (error) {\n        console.error(\"You have an error in your code or there are Network issues.\", error);\n        const {\n          response\n        } = error;\n        this.setState({\n          error: response ? response.statusText : error.message\n        });\n      }\n    });\n\n    const user = this.props.user;\n    const post = this.props.post || [];\n    this.ref1 = React.createRef();\n    this.state = {\n      id: this.props.post ? this.props.post.id : undefined,\n      owner: post.owner || user.username,\n      firstname: post.firstname || \"\",\n      lastname: post.lastname || \"\",\n      country: post.country || COUNTRYCODE,\n      age: post.age || \"\",\n      email: post.email || user.email,\n      avatar: post.files || \"\",\n      catindex: post.catindex || \"\",\n      keyindex: post.keyindex || \"\",\n      cities: post.cities || \"\",\n      location: post.location || \"\",\n      title: post.title || \"\",\n      phone: post.phone || \"\",\n      price: post.price || \"\",\n      description: post.description || \"\",\n      website: post.website || \"\",\n      rawcities: this.props.citydata,\n      citydata: [],\n      countries: [],\n      currencies: [],\n      maincategories: [],\n      subcategories: [],\n      error: \"\",\n      files: post ? this.props.post.files : [],\n      newfiles: []\n    };\n  }\n\n  onUpdateFiles(fileItems) {\n    console.log(fileItems); // this.setState({\n    //   files: fileItems.map(fileItem => fileItem.file)\n    // });\n  }\n\n  render() {\n    const user = this.props.user;\n    const post = this.props.post || [];\n    const {\n      classes\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"form\", {\n      noValidate: true,\n      onSubmit: this.handleSubmit\n    }, __jsx(Grid, {\n      container: true,\n      spacing: 4\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4\n    }, \"Photo\", __jsx(\"div\", {\n      style: {\n        // backgroundImage: `url('${user.avatar}')`,\n        // backgroundSize: \"cover\",\n        // backgroundPosition: \"center top\",\n        // maxHeight: \"490px\",\n        minHeight: \"310px\"\n      }\n    }, __jsx(FilePond, {\n      onupdatefiles: this.onUpdateFiles.bind(this),\n      setRef: ref => this.ref1 = ref,\n      files: this.props.post.files,\n      handleUploadImages: this.handleUploadImages\n    }))), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4\n    }, __jsx(Grid, {\n      container: true,\n      spacing: 3\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      gutterBottom: true\n    }, \"Ad Details\")), __jsx(Grid, {\n      item: true,\n      xs: 12\n    }, __jsx(SimpleSelect, {\n      options: this.state.maincategories,\n      value: this.state.catindex,\n      placeholder: \"Category\",\n      name: \"category\",\n      onChange: this._handleChangeCategory\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12\n    }, __jsx(SimpleSelect, {\n      options: this.state.subcategories,\n      value: this.state.keyindex,\n      placeholder: \"Subcategory\",\n      name: \"subcategory\",\n      onChange: this._handleChangeSubCategory\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12\n    }, __jsx(SimpleSelect, {\n      options: this.state.citydata,\n      value: this.state.cities,\n      placeholder: \"City\",\n      name: \"city\",\n      onChange: this._handleChangeCity\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12\n    }, __jsx(TextField, {\n      required: true,\n      id: \"title\",\n      name: \"title\",\n      label: \"Title\",\n      fullWidth: true,\n      autoComplete: \"title\",\n      value: this.state.title,\n      variant: \"outlined\",\n      onChange: event => this.setState({\n        title: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12\n    }, __jsx(TextField, {\n      id: \"price\",\n      name: \"price\",\n      label: \"Price\",\n      fullWidth: true,\n      autoComplete: \"price\",\n      value: this.state.price,\n      variant: \"outlined\",\n      onChange: event => this.setState({\n        price: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(TextField, {\n      id: \"description\",\n      label: \"Description\",\n      name: \"description\",\n      multiline: true,\n      fullWidth: true,\n      rows: \"10\",\n      value: this.state.description,\n      variant: \"outlined\",\n      onChange: event => this.setState({\n        description: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(TextField, {\n      id: \"website\",\n      name: \"website\",\n      label: \"Website URL (inc https://)\",\n      fullWidth: true,\n      autoComplete: \"Website\",\n      value: this.state.website,\n      variant: \"outlined\",\n      onChange: event => this.setState({\n        website: event.target.value\n      })\n    })))), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4\n    }, __jsx(Grid, {\n      container: true,\n      spacing: 3\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      gutterBottom: true\n    }, \"Contact Details\")), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(TextField, {\n      required: true,\n      id: \"firstname\",\n      name: \"firstname\",\n      label: \"First Name\",\n      fullWidth: true,\n      autoComplete: \"firstname\",\n      value: this.state.firstname,\n      onChange: event => this.setState({\n        firstname: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(TextField, {\n      required: true,\n      id: \"lastname\",\n      name: \"lastname\",\n      label: \"Last Name\",\n      fullWidth: true,\n      autoComplete: \"lastname\",\n      value: this.state.lastname,\n      onChange: event => this.setState({\n        lastname: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(TextField, {\n      required: true,\n      id: \"age\",\n      name: \"age\",\n      label: \"Age\",\n      fullWidth: true,\n      autoComplete: \"age\",\n      value: this.state.age,\n      onChange: event => this.setState({\n        age: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(TextField, {\n      required: true,\n      id: \"phone\",\n      name: \"phone\",\n      label: \"Phone Number\",\n      fullWidth: true,\n      autoComplete: \"phone\",\n      value: this.state.phone,\n      onChange: event => this.setState({\n        phone: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(TextField, {\n      required: true,\n      id: \"email\",\n      name: \"email\",\n      label: \"Email Address\",\n      fullWidth: true,\n      autoComplete: \"email\",\n      value: this.state.email,\n      onChange: event => this.setState({\n        email: event.target.value\n      })\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12\n    }, __jsx(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.submit\n    }, \"Submit\"))))), this.state.error && __jsx(\"p\", {\n      className: \"error\"\n    }, \"Error: \", this.state.error)));\n  }\n\n}\n\nexport default withStyles(styles)(PostForm);","map":null,"metadata":{},"sourceType":"module"}