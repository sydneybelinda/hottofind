{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport jwt from 'jsonwebtoken';\nimport { PRIVATEKEY } from '../../config';\nimport { User } from '../../models';\nexport default (async (req, res) => {\n  if (!('authorization' in req.headers)) {//    return res.status(401).send('Authorization header missing')\n  }\n\n  const auth = await req.headers.authorization; //const { token } = JSON.parse(auth)\n  //const auth = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNTcyMzIwMjc0fQ.9mxc0ep2kH7mzyRlbKYmYpEa5cQXUmUC4kiH1lGsNhY'\n\n  const decoded = jwt.verify(auth, PRIVATEKEY); //const dejson = JSON.parse(decoded)\n\n  try {\n    const getUser = async obj => {\n      return await User.findOne({\n        where: obj\n      });\n    };\n\n    let data = await getUser({\n      id: decoded.id\n    });\n\n    if (data) {\n      //const data = Object.assign({}, { username: user.username }, js)\n      return res.status(200).json({\n        data\n      }); //  next(null, user);\n    } else {\n      const error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  } catch (error) {\n    const {\n      response\n    } = error;\n    return response ? res.status(response.status).json({\n      message: response.statusText\n    }) : res.status(400).json({\n      message: error.message\n    });\n  }\n});","map":{"version":3,"sources":["C:/src/hottofindtest/pages/api/profile.js"],"names":["fetch","jwt","PRIVATEKEY","User","req","res","headers","auth","authorization","decoded","verify","getUser","obj","findOne","where","data","id","status","json","error","Error","response","statusText","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AAEA,SAASC,IAAT,QAAoB,cAApB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI,EAAE,mBAAmBD,GAAG,CAACE,OAAzB,CAAJ,EAAuC,CACzC;AACG;;AAIF,QAAMC,IAAI,GAAG,MAAMH,GAAG,CAACE,OAAJ,CAAYE,aAA/B,CAPkC,CAQjC;AAED;;AAIC,QAAMC,OAAO,GAAGR,GAAG,CAACS,MAAJ,CAAWH,IAAX,EAAiBL,UAAjB,CAAhB,CAdiC,CAejC;;AAIA,MAAI;AAEF,UAAMS,OAAO,GAAG,MAAMC,GAAN,IAAa;AAC3B,aAAO,MAAMT,IAAI,CAACU,OAAL,CAAa;AACxBC,QAAAA,KAAK,EAAEF;AADiB,OAAb,CAAb;AAGD,KAJD;;AAMA,QAAIG,IAAI,GAAG,MAAMJ,OAAO,CAAC;AAAEK,MAAAA,EAAE,EAAEP,OAAO,CAACO;AAAd,KAAD,CAAxB;;AAEA,QAAID,IAAJ,EAAU;AACR;AACA,aAAOV,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEH,QAAAA;AAAF,OAArB,CAAP,CAFQ,CAGR;AACA,KAJF,MAIQ;AACN,YAAMI,KAAK,GAAG,IAAIC,KAAJ,CAAUC,QAAQ,CAACC,UAAnB,CAAd;AACAH,MAAAA,KAAK,CAACE,QAAN,GAAiBA,QAAjB;AACA,YAAMF,KAAN;AACA;AAEH,GApBD,CAoBE,OAAOA,KAAP,EAAc;AACd,UAAM;AAAEE,MAAAA;AAAF,QAAeF,KAArB;AACA,WAAOE,QAAQ,GACXhB,GAAG,CAACY,MAAJ,CAAWI,QAAQ,CAACJ,MAApB,EAA4BC,IAA5B,CAAiC;AAAEK,MAAAA,OAAO,EAAEF,QAAQ,CAACC;AAApB,KAAjC,CADW,GAEXjB,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEK,MAAAA,OAAO,EAAEJ,KAAK,CAACI;AAAjB,KAArB,CAFJ;AAGD;AACF,CA7CD","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\nimport jwt from 'jsonwebtoken'\r\nimport {PRIVATEKEY} from '../../config'\r\n\r\nimport { User} from '../../models';\r\n\r\nexport default async (req, res) => {\r\n  if (!('authorization' in req.headers)) {\r\n//    return res.status(401).send('Authorization header missing')\r\n  }\r\n\r\n\r\n  \r\n const auth = await req.headers.authorization\r\n  //const { token } = JSON.parse(auth)\r\n\r\n //const auth = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNTcyMzIwMjc0fQ.9mxc0ep2kH7mzyRlbKYmYpEa5cQXUmUC4kiH1lGsNhY'\r\n\r\n\r\n  \r\n  const decoded = jwt.verify(auth, PRIVATEKEY);\r\n  //const dejson = JSON.parse(decoded)\r\n \r\n\r\n\r\n  try {\r\n    \r\n    const getUser = async obj => {\r\n      return await User.findOne({\r\n        where: obj,\r\n      });\r\n    };\r\n  \r\n    let data = await getUser({ id: decoded.id });\r\n\r\n    if (data) {\r\n      //const data = Object.assign({}, { username: user.username }, js)\r\n      return res.status(200).json({ data })\r\n      //  next(null, user);\r\n     } else {\r\n      const error = new Error(response.statusText)\r\n      error.response = response\r\n      throw error\r\n     }\r\n\r\n  } catch (error) {\r\n    const { response } = error\r\n    return response\r\n      ? res.status(response.status).json({ message: response.statusText })\r\n      : res.status(400).json({ message: error.message })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}