{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { User } from '../../../models';\nimport { PRIVATEKEY } from '../../../config';\nexport default (async (req, res) => {\n  console.log('test');\n\n  try {\n    const getUser = async obj => {\n      return await User.findOne({\n        where: obj\n      });\n    };\n\n    if (req.method === 'POST') {\n      const {\n        username,\n        password\n      } = req.body;\n      User.findOne({\n        where: {\n          username: username\n        }\n      }).then(user => {\n        if (!user) {\n          errors.email = \"No Account Found\";\n          const error = new Error(errors.email);\n          error.response = response;\n          throw error;\n        }\n\n        bcrypt.compare(password, user.password).then(isMatch => {\n          if (isMatch) {\n            // const id  = user.id\n            // return res.status(200).json({ token: id })\n            const payload = {\n              id: user.id,\n              username: user.username\n            };\n            let token = jwt.sign(payload, PRIVATEKEY);\n            res.json({\n              msg: 'ok',\n              token: `${token}`,\n              user: user\n            }); // jwt.sign(payload, secret, { expiresIn: 36000 },\n            //         (err, token) => {\n            //           if (err) res.status(500)\n            //           .json({ error: \"Error signing token\",\n            //                  raw: err }); \n            //            res.status(200).json({ \n            //            msg: ok,\n            //            token: `Bearer ${token}` });\n            // });      \n          } else {\n            errors.password = \"Password is incorrect\";\n            res.status(400).json(errors);\n          }\n        });\n      });\n    } //     const response = await fetch(url)\n    //     if (response.ok) {\n    //       const { id } = await response.json()\n    //       return res.status(200).json({ token: id })\n    //     } else {\n    //       // https://github.com/developit/unfetch#caveats\n    //       const error = new Error(response.statusText)\n    //       error.response = response\n    //       throw error\n    //     }\n\n  } catch (error) {\n    const {\n      response\n    } = error;\n    return response ? res.status(response.status).json({\n      message: response.statusText\n    }) : res.status(400).json({\n      message: error.message\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}