{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar __jsx = React.createElement;\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport fetch from \"isomorphic-unfetch\";\nimport React, { useState } from \"react\";\nimport { login } from \"../utils/auth\";\n\nfunction Copyright() {\n  return __jsx(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    align: \"center\"\n  }, \"Copyright Â© \", __jsx(Link, {\n    color: \"inherit\",\n    href: \"https://material-ui.com/\"\n  }, \"Your Website\"), \" \", new Date().getFullYear(), \".\");\n}\n\nconst useStyles = makeStyles(theme => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\",\n    // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nfunction Login() {\n  const classes = useStyles();\n  const {\n    0: userData,\n    1: setUserData\n  } = useState({\n    username: \"\",\n    password: \"\",\n    error: \"\"\n  });\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setUserData(_Object$assign({}, userData, {\n      error: \"\"\n    }));\n    const username = userData.username;\n    const password = userData.password; // const url = '/api/login'\n\n    const url = \"/api/auth/signin\";\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: _JSON$stringify({\n          username,\n          password\n        })\n      });\n\n      if (response.status === 200) {\n        const {\n          token\n        } = await response.json();\n        await login({\n          token\n        });\n      } else {\n        console.log(\"Login failed.\");\n        const res = await response.json();\n        let error = res.response;\n        throw error;\n      }\n    } catch (error) {\n      console.error(\"You have an error in your code or there are Network issues.\", error);\n      setUserData(_Object$assign({}, userData, {\n        error: error\n      }));\n    }\n  }\n\n  return __jsx(Container, {\n    component: \"main\",\n    maxWidth: \"xs\"\n  }, __jsx(CssBaseline, null), __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(Avatar, {\n    className: classes.avatar\n  }, __jsx(LockOutlinedIcon, null)), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h5\"\n  }, \"Sign in\"), __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    onSubmit: handleSubmit\n  }, __jsx(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    name: \"username\",\n    value: userData.username,\n    onChange: event => setUserData(_Object$assign({}, userData, {\n      username: event.target.value\n    })),\n    label: \"Username\",\n    name: \"email\",\n    autoComplete: \"username\",\n    autoFocus: true\n  }), __jsx(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    id: \"password\",\n    name: \"password\",\n    value: userData.password,\n    onChange: event => setUserData(_Object$assign({}, userData, {\n      password: event.target.value\n    })),\n    placeholder: \"Password\",\n    required: true,\n    label: \"Password\",\n    type: \"password\",\n    autoComplete: \"current-password\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      value: \"remember\",\n      color: \"primary\"\n    }),\n    label: \"Remember me\"\n  }), __jsx(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit\n  }, \"Sign In\"), __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    xs: true\n  }, __jsx(Link, {\n    href: \"#\",\n    variant: \"body2\"\n  }, \"Forgot password?\")), __jsx(Grid, {\n    item: true\n  }, __jsx(Link, {\n    href: \"/register\",\n    variant: \"body2\"\n  }, \"Don't have an account? Sign Up\"))), userData.error && __jsx(\"p\", {\n    className: \"error\"\n  }, \"Error: \", userData.error))), __jsx(Box, {\n    mt: 8\n  }, __jsx(Copyright, null)));\n}\n\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}