{"ast":null,"code":"import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport passportJWT from 'passport-jwt';\nimport passport from 'passport';\nimport { User } from '../../../models'; // let ExtractJwt = passportJWT.ExtractJwt;\n// let JwtStrategy = passportJWT.Strategy;\n// let jwtOptions = {};\n// jwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\n// jwtOptions.secretOrKey = 'wowwow';\n\nexport default (async (req, res) => {\n  const getUser = async obj => {\n    return await User.findOne({\n      where: obj\n    });\n  }; //   let strategy = new JwtStrategy(jwtOptions, async function(jwt_payload, next) {\n  //     // console.log('payload received', jwt_payload);\n  //      let user = await getUser({ id: jwt_payload.id });\n  //      if (user) {\n  //        next(null, user);\n  //      } else {\n  //        next(null, false);\n  //      }\n  //    });\n  //    // use the strategy\n  //     passport.use(strategy);\n  //    app.use(passport.initialize());\n\n\n  if (req.method === 'POST') {\n    const {\n      username,\n      password\n    } = req.body;\n\n    if (username && password) {\n      let user = await getUser({\n        username: username\n      });\n\n      if (user) {\n        const hashed = bcrypt.hashSync(password, user.password);\n\n        if (user.password === hashed) {\n          // from now on we'll identify the user by the id and the id is the \n          // only personalized value that goes into our token\n          let payload = {\n            id: user.id\n          };\n          let token = jwt.sign(payload, jwtOptions.secretOrKey);\n          res.json({\n            msg: 'ok',\n            token: token,\n            user: user\n          });\n        } else {\n          res.status(401).json({\n            msg: 'Password is incorrect'\n          });\n        }\n      } else {\n        res.status(401).json({\n          message: 'No such user found'\n        });\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}