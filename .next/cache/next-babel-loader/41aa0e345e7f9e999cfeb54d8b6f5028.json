{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Container from \"@material-ui/core/Container\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport Breadcrumbs from \"../../components/breadcrumbs\";\nimport Layout from \"../../components/layout\";\nimport LocationMenu from \"../../components/LocationMenu\";\nimport PostPreview from \"../../components/postPreview\";\nimport config from \"../../config\";\nimport { withAuth } from \"../../utils/auth\";\nconst useStyles = makeStyles(theme => ({\n  toolbar: {\n    borderBottom: `1px solid ${theme.palette.divider}`\n  },\n  toolbarTitle: {\n    flex: 1\n  },\n  toolbarSecondary: {\n    justifyContent: \"space-between\",\n    overflowX: \"auto\"\n  },\n  toolbarLink: {\n    padding: theme.spacing(1),\n    flexShrink: 0\n  },\n  sitename: {\n    fontSize: \"46px\",\n    lineHeight: \"40px\",\n    marginBottom: \"0\",\n    [theme.breakpoints.down(\"md\")]: {\n      fontSize: \"30px\",\n      lineHeight: \"35px\"\n    }\n  },\n  mainFeaturedPost: {\n    position: \"relative\",\n    backgroundColor: theme.palette.grey[800],\n    color: theme.palette.common.white,\n    marginBottom: 0,\n    backgroundImage: \"url(https://source.unsplash.com/user/erondu)\",\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\"\n  },\n  overlay: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    backgroundColor: \"rgba(0,0,0,.3)\"\n  },\n  mainFeaturedPostContent: {\n    position: \"relative\",\n    padding: theme.spacing(3),\n    [theme.breakpoints.up(\"md\")]: {\n      padding: theme.spacing(6),\n      paddingRight: 0\n    }\n  },\n  mainGrid: {\n    marginTop: theme.spacing(3)\n  },\n  card: {\n    display: \"flex\"\n  },\n  cardDetails: {\n    flex: 1\n  },\n  subtext: {\n    fontFamily: 'Lora, \"Times New Roman\", Times, Baskerville, Georgia, serif',\n    fontSize: \"18px\",\n    minHeight: \"25.6px\",\n    [theme.breakpoints.down(\"md\")]: {\n      fontSize: \"12px\"\n    },\n    margin: 0,\n    marginLeft: \"3px\"\n  },\n  cardMedia: {\n    width: 160\n  },\n  hot: {\n    color: \"#00ffe7\"\n  },\n  markdown: _objectSpread({}, theme.typography.body2, {\n    padding: theme.spacing(3, 0)\n  }),\n  sidebarAboutBox: {\n    padding: theme.spacing(2),\n    backgroundColor: theme.palette.grey[200]\n  },\n  sidebarSection: {\n    marginTop: theme.spacing(3)\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(8),\n    padding: theme.spacing(6, 0)\n  },\n  mainCat: {\n    fontWeight: \"400\"\n  },\n  gitem: {\n    padding: \"2px !important\",\n    [theme.breakpoints.up(\"sm\")]: {\n      padding: \"16px !important\"\n    }\n  },\n  grid: {\n    paddingLeft: \"5px\",\n    paddingRight: \"5px\",\n    [theme.breakpoints.up(\"sm\")]: {\n      paddingLeft: \"20px\",\n      paddingRight: \"20px\"\n    }\n  },\n  left: {\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\"\n    },\n    display: \"none\",\n    width: \"350px\",\n    flex: \"none\"\n  },\n  right: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: \"calc(100% - 350px)\"\n    },\n    width: \"100%\"\n  },\n  cont: {\n    display: \"flex\",\n    flexDirection: \"row\"\n  },\n  city: {\n    textTransform: \"capitalize\"\n  },\n  pagination: {\n    marginTop: \"30px\",\n    marginBottom: \"50px\",\n    textAlign: \"right\",\n    borderTop: \"1px solid silver\",\n    padding: \"5px\"\n  }\n}));\n\nfunction Posts(props) {\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    next: true,\n    previous: true\n  });\n  const classes = useStyles();\n  const acount = props.page * 100;\n  const router = useRouter();\n  const {\n    slug\n  } = router.query;\n\n  const capitalize = s => {\n    if (typeof s !== \"string\") return \"\";\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  };\n\n  const catindex = slug[0];\n  const keyindex = slug[1];\n  const category = props.categories.find(e => e.catindex === catindex); //  }\n  //if(props.query.keyindex){\n\n  const subcat = props.categories.find(e => e.keyindex === keyindex);\n  var pLock = \"/posts\";\n\n  if (catindex) {\n    pLock += `/${catindex}`;\n  }\n\n  if (keyindex) {\n    pLock += `/${keyindex}`;\n  }\n\n  if (props.city) {\n    pLock += `?city=${props.city}`;\n  } // if(keyindex){\n  //  pLock = `/${catindex}/${keyindex}`\n  // } else {\n  //    pLock = `/${catindex}`\n  // }\n  // var cty;\n  // if (props.city){\n  //   cty = `&city=${props.city}`\n  // }\n\n\n  if (category) {\n    var cat = category.maincategory;\n  } else {\n    var cat = \"All Posts\";\n  }\n\n  var sub = `All Posts in ${config.COUNTRYCODE}`;\n  return __jsx(Layout, {\n    user: props.user,\n    categories: props.categories\n  }, __jsx(Paper, {\n    className: classes.mainFeaturedPost\n  }, __jsx(Container, {\n    maxWidth: \"xl\"\n  }, __jsx(\"img\", {\n    style: {\n      display: \"none\"\n    },\n    src: \"https://source.unsplash.com/user/erondu\",\n    alt: \"background\"\n  }), __jsx(\"div\", {\n    className: classes.overlay\n  }), __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 6\n  }, __jsx(\"div\", {\n    className: classes.mainFeaturedPostContent\n  }, __jsx(\"h1\", {\n    className: classes.sitename\n  }, \" \", subcat ? __jsx(\"span\", {\n    className: classes.hot\n  }, subcat.subcategory) : __jsx(\"span\", {\n    className: classes.hot\n  }, cat), props.city ? __jsx(\"span\", {\n    className: classes.city\n  }, \" \", capitalize(props.city)) : \"\"), subcat ? __jsx(\"p\", {\n    className: classes.subtext\n  }, category.maincategory) : __jsx(\"p\", {\n    className: classes.subtext\n  }, \" \")))))), __jsx(Breadcrumbs, {\n    query: props.query,\n    categories: props.categories\n  }), __jsx(Container, {\n    maxWidth: \"xl\",\n    className: classes.cont\n  }, __jsx(\"div\", {\n    className: classes.left\n  }, __jsx(\"div\", {\n    className: classes.filter\n  }, __jsx(LocationMenu, {\n    cities: props.cities,\n    catindex: catindex,\n    keyindex: keyindex,\n    city: props.city\n  }))), __jsx(\"div\", {\n    className: classes.right\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 4,\n    className: classes.grid\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 12\n  }, __jsx(Divider, null)), props.posts.rows ? props.posts.rows.map(post => __jsx(Grid, {\n    className: classes.gitem,\n    item: true,\n    key: post.id,\n    xs: 12,\n    sm: 6,\n    md: 4,\n    lg: 3\n  }, __jsx(PostPreview, {\n    post: post\n  }))) : \"\"), __jsx(\"div\", {\n    className: classes.pagination\n  }, props.page > 1 ? __jsx(Link, {\n    href: `/posts${pLock}`\n  }, __jsx(\"a\", null, \"First page\")) : \"\", props.page > 1 ? __jsx(\"button\", {\n    onClick: () => router.push(`${pLock}&page=${props.page - 1}`),\n    disabled: props.page <= 1\n  }, \"PREV\") : \"\", props.posts.count > acount ? __jsx(\"button\", {\n    onClick: () => router.push(`${pLock}&page=${props.page + 1}`)\n  }, \"NEXT\") : \"\"))));\n}\n\nPosts.getInitialProps = async ({\n  query\n}) => {\n  // const res = await fetch('http://localhost:3000/api/posts/latest');\n  const {\n    API,\n    COUNTRYCODE\n  } = config;\n  const {\n    city,\n    page = 1\n  } = query; //   let page = 1\n  //  if(query.page){\n  //   page = query.page\n  //  }\n\n  let url = `${API}/posts/get?countrycode=${COUNTRYCODE}`;\n\n  if (query.catindex) {\n    url += `&catindex=${query.catindex}`;\n  }\n\n  if (query.keyindex) {\n    url += `&keyindex=${query.keyindex}`;\n  }\n\n  if (city) {\n    url += `&city=${city}`;\n  }\n\n  if (page) {\n    url += `&page=${page}`;\n  }\n\n  const res = await fetch(url);\n  let data = await res.json();\n  const urlb = `${API}/city/get/${COUNTRYCODE}`;\n  const resb = await fetch(urlb);\n  let cities = await resb.json();\n  return {\n    posts: data,\n    cities: cities,\n    page: _parseInt(page, 10),\n    city: city,\n    query: query\n  };\n};\n\nexport default withAuth(Posts);","map":null,"metadata":{},"sourceType":"module"}