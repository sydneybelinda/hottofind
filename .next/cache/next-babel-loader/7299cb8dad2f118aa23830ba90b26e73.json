{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { login } from '../utils/auth';\n\nfunction Copyright() {\n  return __jsx(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    align: \"center\"\n  }, 'Copyright Â© ', __jsx(Link, {\n    color: \"inherit\",\n    href: \"https://material-ui.com/\"\n  }, \"Your Website\"), ' ', new Date().getFullYear(), '.');\n}\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%',\n    // Fix IE 11 issue.\n    marginTop: theme.spacing(3)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\nexport default function SignUp() {\n  const classes = useStyles();\n  const {\n    0: userData,\n    1: setUserData\n  } = useState({\n    name: '',\n    email: '',\n    username: '',\n    password: '',\n    error: ''\n  });\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setUserData(_Object$assign({}, userData, {\n      error: ''\n    }));\n    const name = userData.name;\n    const email = userData.email;\n    const username = userData.username;\n    const password = userData.password;\n    const url = '/api/auth/signup';\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify({\n          userData\n        })\n      });\n\n      if (response.status === 200) {\n        const {\n          token\n        } = await response.json();\n        await login({\n          token\n        });\n      } else {\n        console.log('Login failed.'); // https://github.com/developit/unfetch#caveats\n\n        let error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    } catch (error) {\n      console.error('You have an error in your code or there are Network issues.', error);\n      const {\n        response\n      } = error;\n      setUserData(_Object$assign({}, userData, {\n        error: response ? response.statusText : error.message\n      }));\n    }\n  }\n\n  return __jsx(Container, {\n    component: \"main\",\n    maxWidth: \"xs\"\n  }, __jsx(CssBaseline, null), __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(Avatar, {\n    className: classes.avatar\n  }, __jsx(LockOutlinedIcon, null)), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h5\"\n  }, \"Sign up\"), __jsx(\"form\", {\n    className: classes.form,\n    onSubmit: handleSubmit,\n    noValidate: true\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(TextField, {\n    autoComplete: \"name\",\n    name: \"name\",\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    id: \"name\",\n    label: \"Name\",\n    autoFocus: true,\n    onChange: event => setUserData(_Object$assign({}, userData, {\n      name: event.target.value\n    }))\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(TextField, {\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    id: \"username\",\n    label: \"Username\",\n    name: \"username\",\n    autoComplete: \"username\",\n    onChange: event => setUserData(_Object$assign({}, userData, {\n      username: event.target.value\n    }))\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    id: \"email\",\n    label: \"Email Address\",\n    name: \"email\",\n    autoComplete: \"email\",\n    onChange: event => setUserData(_Object$assign({}, userData, {\n      email: event.target.value\n    }))\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    name: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    id: \"password\",\n    autoComplete: \"current-password\",\n    onChange: event => setUserData(_Object$assign({}, userData, {\n      password: event.target.value\n    }))\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      value: \"allowExtraEmails\",\n      color: \"primary\"\n    }),\n    label: \"I want to receive inspiration, marketing promotions and updates via email.\"\n  }))), userData.error && __jsx(\"p\", {\n    className: \"error\"\n  }, \"Error: \", userData.error), __jsx(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit\n  }, \"Sign Up\"), __jsx(Grid, {\n    container: true,\n    justify: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Link, {\n    href: \"/login\",\n    variant: \"body2\"\n  }, \"Already have an account? Sign in\"))))), __jsx(Box, {\n    mt: 5\n  }, __jsx(Copyright, null)));\n}","map":null,"metadata":{},"sourceType":"module"}