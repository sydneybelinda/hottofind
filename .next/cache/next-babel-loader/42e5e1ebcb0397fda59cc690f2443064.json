{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n// Import React FilePond\nimport React, { useState, useEffect } from \"react\";\nimport { FilePond, registerPlugin } from \"react-filepond\"; // Import FilePond styles\n\nimport \"filepond/dist/filepond.min.css\";\nimport FilePondPluginFileRename from \"filepond-plugin-file-rename\";\nimport FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\nimport FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\nimport FilePondPluginImageCrop from \"filepond-plugin-image-crop\"; // Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\n\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\nimport FilePondPluginImageTransform from \"filepond-plugin-image-transform\";\nimport FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\";\nimport * as Queries from '../../utils/queries';\nimport { URL } from \"../../config\"; // Register the plugins\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageResize, FilePondPluginFileRename, FilePondPluginFileValidateSize, FilePondPluginFileValidateType, FilePondPluginImageCrop, FilePondPluginImageValidateSize, FilePondPluginImageTransform); // Our app\n\nvar FileUploader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FileUploader, _React$Component);\n\n  function FileUploader(props) {\n    var _this;\n\n    _classCallCheck(this, FileUploader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileUploader).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      if (_this.props.user.avatar) {\n        var files = [];\n        files.push({\n          source: \"\".concat(URL, \"/uploadedimages/profile/\").concat(_this.props.user.avatar),\n          options: {\n            type: \"local\"\n          }\n        });\n        console.log(files);\n\n        _this.setState({\n          files: files\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeid\", function (length) {\n      var result = \"\";\n      var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    });\n\n    _this.state = {\n      // Set initial files, type 'local' means this is a file\n      // that has already been uploaded to the server (see docs)\n      //  files: [\n      //     {\n      //       source: `${URL}/public/uploadedfiles/${this.props.files.name}`,\n      //       options: {\n      //         type: \"local\"\n      //       }\n      //     }\n      //  ]\n      files: []\n    };\n    return _this;\n  }\n\n  _createClass(FileUploader, [{\n    key: \"handleInit\",\n    value: function handleInit() {\n      console.log(\"FilePond instance has initialised\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var n;\n      return __jsx(\"div\", {\n        className: \"App\"\n      }, __jsx(FilePond, {\n        ref: this.props.setRef,\n        files: this.state.files,\n        allowMultiple: false,\n        name: \"file\",\n        maxFiles: 1,\n        server: {\n          // process: \"/api/dashboard/file/profileupload\",\n          process: {\n            url: '/api/dashboard/file/profileupload',\n            method: 'POST',\n            onload: function onload(response) {\n              console.log(response);\n              var file = {\n                name: response,\n                username: _this2.props.user.username\n              };\n              Queries.uploadProfilePhoto(file);\n            },\n            onerror: function onerror(response) {\n              return response.data;\n            },\n            ondata: function ondata(formData) {\n              formData.append('username', _this2.props.user.username);\n              return formData;\n            }\n          },\n          load: function load(source, _load) {\n            // simulates loading a file from the server\n            fetch(source).then(function (res) {\n              return res.blob();\n            }).then(_load);\n          },\n          remove: function remove(source, load, error) {\n            // var name = source.replace(`/uploadedimages/profile/`, '')      \n            var file = {\n              username: _this2.props.user.username\n            }; // Should somehow send `source` to server so server can remove the file with this source\n\n            Queries.deleteAvatar(file); // Can call the error method if something is wrong, should exit after\n\n            error('oh my goodness'); // Should call the load method when done, no parameters required\n\n            load();\n          }\n        },\n        imageResizeMode: \"cover\",\n        allowImageTransform: true,\n        allowImageCrop: true,\n        imageCropAspectRatio: \"1:1\",\n        oninit: function oninit() {\n          return _this2.handleInit();\n        },\n        imageTransformOutputQuality: 65,\n        imageTransformOutputMimeType: \"image/jpeg\",\n        fileRenameFunction: function fileRenameFunction(file) {\n          n = _this2.makeid(25);\n          return n + file.extension;\n        },\n        onupdatefiles: function onupdatefiles(fileItems) {\n          //this.props.onupdatefiles({ files: fileItems.map(fileItem => fileItem.file) });\n          _this2.setState({\n            files: fileItems.map(function (fileItem) {\n              return fileItem.file;\n            })\n          });\n        } // onupdatefiles={this.props.onupdatefiles }\n        ,\n        onDrop: this.props.handleUploadImages\n      }));\n    }\n  }]);\n\n  return FileUploader;\n}(React.Component);\n\nexport default FileUploader;","map":null,"metadata":{},"sourceType":"module"}