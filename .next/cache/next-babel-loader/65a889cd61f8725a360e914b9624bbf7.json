{"ast":null,"code":"const passport = require('passport');\n\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport passportJWT from 'passport-jwt'; // require('../../../utils/passport')(passport);\n\nimport { User } from '../../../models';\nlet ExtractJwt = passportJWT.ExtractJwt;\nlet JwtStrategy = passportJWT.Strategy;\nlet jwtOptions = {};\njwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\njwtOptions.secretOrKey = 'wowwow';\nconst secret = process.env.SECRET || 'the default secret';\nexport default (async (req, res) => {\n  const getUser = async obj => {\n    return await User.findOne({\n      where: obj\n    });\n  };\n\n  if (req.method === 'POST') {\n    const {\n      username,\n      password\n    } = req.body;\n    User.findOne({\n      where: {\n        username: username\n      }\n    }).then(user => {\n      if (!user) {\n        errors.email = \"No Account Found\";\n        return res.status(404).json(errors);\n      }\n\n      bcrypt.compare(password, user.password).then(isMatch => {\n        if (isMatch) {\n          const payload = {\n            id: user._id,\n            name: user.username\n          };\n          let token = jwt.sign(payload, jwtOptions.secretOrKey);\n          res.json({\n            msg: 'ok',\n            token: `JWT ${token}`,\n            user: user\n          }); // jwt.sign(payload, secret, { expiresIn: 36000 },\n          //         (err, token) => {\n          //           console.log('blaj')\n          //           if (err) res.status(500)\n          //           .json({ error: \"Error signing token\",\n          //                  raw: err }); \n          //            res.status(200).json({ \n          //            msg: ok,\n          //            token: `Bearer ${token}` });\n          // });      \n        } else {\n          errors.password = \"Password is incorrect\";\n          res.status(400).json(errors);\n        }\n      });\n    }); // const { username, password } = req.body;\n    // if (username && password) {\n    //   let user = await getUser({ username: username });\n    //   if (user) {\n    //   const hashed = bcrypt.hashSync(password, user.password);\n    //   if (user.password === hashed) {\n    //     // from now on we'll identify the user by the id and the id is the \n    //     // only personalized value that goes into our token\n    //     let payload = { id: user.id };\n    //     let token = jwt.sign(payload, jwtOptions.secretOrKey)\n    //     res.json({ msg: 'ok', token: token, user: user });\n    //   } else {\n    //     res.status(401).json({ msg: 'Password is incorrect' });\n    //   }\n    // } else {\n    //   res.status(401).json({ message: 'No such user found' });\n    // }}\n  }\n});","map":null,"metadata":{},"sourceType":"module"}