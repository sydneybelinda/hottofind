{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect } from \"react\";\nimport Router from \"next/router\";\nimport nextCookie from \"next-cookies\";\nimport cookie from \"js-cookie\";\nimport jwt from \"jsonwebtoken\";\nimport { PRIVATEKEY } from \"../config\";\nexport const login = ({\n  token\n}) => {\n  cookie.set(\"token\", token, {\n    expires: 1\n  });\n  Router.push(\"/dashboard\");\n};\nexport const auth = ctx => {\n  const {\n    token\n  } = nextCookie(ctx);\n  /*\r\n   * If `ctx.req` is available it means we are on the server.\r\n   * Additionally if there's no token it means the user is not logged in.\r\n   */\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: \"/login\"\n    });\n    ctx.res.end();\n  } // We already checked for server. This should only happen on client.\n\n\n  if (!token) {\n    Router.push(\"/login\");\n  }\n\n  return token;\n};\nexport const logout = () => {\n  cookie.remove(\"token\"); // to support logging out from all windows\n\n  window.localStorage.setItem(\"logout\", _Date$now());\n  Router.push(\"/\");\n};\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === \"logout\") {\n        console.log(\"logged out from storage!\");\n        Router.push(\"/login\");\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener(\"storage\", syncLogout);\n      return () => {\n        window.removeEventListener(\"storage\", syncLogout);\n        window.localStorage.removeItem(\"logout\");\n      };\n    }, [null]);\n    return __jsx(WrappedComponent, props);\n  };\n\n  Wrapper.getInitialProps = async ctx => {\n    const token = auth(ctx);\n    const user = jwt.verify(token, PRIVATEKEY);\n    const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n    return _objectSpread({}, componentProps, {\n      token,\n      user\n    });\n  };\n\n  return Wrapper;\n};\nexport const withAuth = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === \"logout\") {\n        console.log(\"logged out from storage!\");\n        Router.push(\"/login\");\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener(\"storage\", syncLogout);\n      return () => {\n        window.removeEventListener(\"storage\", syncLogout);\n        window.localStorage.removeItem(\"logout\");\n      };\n    }, [null]);\n    return __jsx(WrappedComponent, props);\n  };\n\n  Wrapper.getInitialProps = async ctx => {\n    let user;\n    const {\n      token\n    } = nextCookie(ctx);\n\n    if (token) {\n      user = jwt.verify(token, PRIVATEKEY);\n    }\n\n    const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n    return _objectSpread({}, componentProps, {\n      token,\n      user\n    });\n  };\n\n  return Wrapper;\n};","map":null,"metadata":{},"sourceType":"module"}